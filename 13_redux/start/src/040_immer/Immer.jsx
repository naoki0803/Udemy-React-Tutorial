import { produce } from "immer";

/** Immer
 *
 *  Immer はnpm でインストールする必要がある
 *  "immer": "^10.0.4",
 *
 * import した produce 関数は、
 * 第一引数に オブジェクト
 * 第に引数にコールバック関数を記述し、その引数に Proxy がわたってくる。
 *
 * Proxy は、第一引数のオブジェクトの変更を自動的に検知して、何かしらの追加作業を実施してくれる。
 *
 *
 */

const state = { name: "tom", hobbis: ["tennis", "soccer"] };
const newState = produce(state, (draft) => {
    draft.name = "John";
    // console.log(draft); // Proxy(Object)
});

console.log(state === newState); // Proxy(Object)

/**
 * draft とはなんですか？
draft は、Immer ライブラリで使用される概念で、プロキシオブジェクトのことです。Immer は、オブジェクトのイミュータブルな更新を簡単にするために使用されるライブラリです。
Immer の produce 関数は、第一引数に元のオブジェクト（ここでは state）、第二引数にコールバック関数を受け取ります。このコールバック関数の引数として渡されるのが draft です。
;
draft は、元の state オブジェクトのプロキシです。プロキシとは、元のオブジェクトに対する操作をインターセプトし、追加の処理を行うことができるオブジェクトです。Immer の場合、draft に対する変更を検知し、内部でイミュータブルな新しいオブジェクトを生成します。
具体的には、draft に対して以下のような操作が可能です。
プロパティの変更: draft.name = "John"; のように、プロパティの値を変更できます。
配列の変更: draft.hobbies.push("reading"); のように、配列の要素を追加したり、削除したりできます。
オブジェクトの追加: draft.address = { city: "Tokyo" }; のように、新しいオブジェクトを追加できます。
これらの操作は、draft に対して直接行われますが、Immer はこれらの変更を検知し、元の state オブジェクトを変更せずに、新しいオブジェクトを生成します。
draft を使用するメリットは以下の通りです。
ミュータブルなコードでイミュータブルな更新: draft を使うことで、ミュータブルなコードを記述しながら、イミュータブルな更新を実現できます。これにより、コードがより直感的で書きやすくなります。
複雑なオブジェクトの更新が簡単: ネストされたオブジェクトや配列の更新も、draft を使えば簡単に記述できます。
パフォーマンスの最適化: Immer は、変更された部分だけを効率的に更新するため、パフォーマンスも優れています。
まとめると、draft は Immer が提供するプロキシオブジェクトであり、これを使うことで、ミュータブルなコードでイミュータブルな更新を簡単に行うことができるようになります。
 * 
 * 
 */
